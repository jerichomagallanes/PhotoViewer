plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace 'com.magallanes.photoviewer'
    compileSdk 34

    defaultConfig {
        applicationId "com.magallanes.photoviewer"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // Load environment variables from app.properties file
        project.ext.envConfigFile = rootProject.file("app.properties")
        def appProperties = new Properties()
        appProperties.load(new FileInputStream(project.ext.envConfigFile))

        // Set environment variables as buildConfigField
        buildConfigField("String", "PEXELS_API_KEY", appProperties.getProperty("PEXELS_API_KEY"))
    }

    flavorDimensions "environment"

    productFlavors {
        dev {
            dimension "environment"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }

        sit {
            dimension "environment"
            applicationIdSuffix ".sit"
            versionNameSuffix "-sit"
        }

        prod {
            dimension "environment"
        }
    }

    applicationVariants.all { variant ->
        def versionName = defaultConfig.versionName
        def flavorName = variant.flavorName.toUpperCase()

        if (variant.name == 'prodRelease') {
            variant.mergedFlavor.manifestPlaceholders = [appName: "Photo Viewer"]
        } else {
            variant.mergedFlavor.manifestPlaceholders = [appName: "Photo Viewer $versionName $flavorName"]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

ext {
    core_ktx_version = '1.10.1'
    lifecycle_runtime_ktx_version = '2.6.1'
    activity_compose_version = '1.7.2'
    material_version = '1.4.3'
    androidx_junit_version = '1.1.5'
    espresso_core_version = '3.5.1'
    coil_compose_version = '2.2.2'
    lifecycle_compose_version = '2.6.1'
    accompanist_version = '0.17.0'
    dagger_version = '2.45'
    hilt_navigation_compose_version = '1.0.0'
    navigation_compose_version = '2.6.0'
    paging_runtime_ktx_version = '3.1.1'
    paging_compose_version = '3.2.0-rc01'
    retrofit_version = '2.9.0'
    logging_interceptor_version = '5.0.0-alpha.3'
    moshi_version = '1.14.0'
    gson_version = '2.9.0'
    room_version = '2.5.2'
    daggerHiltVersion = "2.28-alpha"
    kotlinxCoroutinesTestVersion = "1.6.4"
    junitVersion = "4.13.2"
    junitJupiterVersion = "5.8.0"
    mockkVersion = "1.12.0"
    coreTestingVersion = "1.1.1"
    truthVersion = "1.1"
    daggerHiltCompilerVersion = "2.40.5"
}

dependencies {
    implementation "androidx.core:core-ktx:${core_ktx_version}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${lifecycle_runtime_ktx_version}"
    implementation "androidx.activity:activity-compose:${activity_compose_version}"
    implementation "androidx.compose.ui:ui:${compose_ui_version}"
    implementation "androidx.compose.ui:ui-tooling-preview:${compose_ui_version}"
    implementation "androidx.compose.material:material:${material_version}"
    debugImplementation "androidx.compose.ui:ui-tooling:${compose_ui_version}"
    debugImplementation "androidx.compose.ui:ui-test-manifest:${compose_ui_version}"

    // Coil Compose
    implementation "io.coil-kt:coil-compose:${coil_compose_version}"

    implementation "androidx.lifecycle:lifecycle-runtime-compose:${lifecycle_compose_version}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:${lifecycle_compose_version}"
    implementation "com.google.accompanist:accompanist-flowlayout:${accompanist_version}"

    // Dagger - Hilt
    implementation "com.google.dagger:hilt-android:${dagger_version}"
    kapt "com.google.dagger:hilt-android-compiler:${dagger_version}"
    kapt "androidx.hilt:hilt-compiler:${hilt_navigation_compose_version}"
    implementation "androidx.navigation:navigation-compose:${navigation_compose_version}"
    implementation "androidx.hilt:hilt-navigation-compose:${hilt_navigation_compose_version}"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:${paging_runtime_ktx_version}"
    implementation "androidx.paging:paging-compose:${paging_compose_version}"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${retrofit_version}"
    implementation "com.squareup.okhttp3:logging-interceptor:${logging_interceptor_version}"

    // Moshi
    implementation("com.squareup.moshi:moshi:${moshi_version}")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:${moshi_version}")
    implementation("com.squareup.retrofit2:converter-moshi:${retrofit_version}")

    // Gson
    implementation("com.google.code.gson:gson:${gson_version}")

    // Room
    implementation "androidx.room:room-ktx:${room_version}"
    kapt "androidx.room:room-compiler:${room_version}"
    implementation "androidx.room:room-paging:${room_version}"

    // Testing
    androidTestImplementation "androidx.test.ext:junit:${androidx_junit_version}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${espresso_core_version}"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:${compose_ui_version}"
    androidTestImplementation "com.google.dagger:hilt-android-testing:${daggerHiltVersion}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${kotlinxCoroutinesTestVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "io.mockk:mockk:${mockkVersion}"
    testImplementation "android.arch.core:core-testing:${coreTestingVersion}"
    testImplementation "com.google.truth:truth:${truthVersion}"
    testImplementation "com.google.dagger:hilt-android-testing:${daggerHiltVersion}"
    kaptTest "com.google.dagger:hilt-android-compiler:${daggerHiltCompilerVersion}"

}
